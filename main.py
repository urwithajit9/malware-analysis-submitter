import os
import sys
import time
import shutil
import config
from data import DB
from backend import anubis
from backend import cwsandbox
from backend.errors import SafetyCheckError, TimeLeftError, FatalError

if config.path:
    sys.path = sys.path + config.path

db = DB()

class ThrottleError(Exception):
    def __init__(*args, **kargs):
        Exeption.__init__(*args, **kargs)

def process_new():
    # Get list of files that need submitting
    submit_list = os.listdir(config.new)
    # Submit and retrieve every file
    for file in submit_list:
        path = os.path.join(config.new, file)
        # Add file to database
        try:
            fid = db.add_file(file)
        except Exception, e:
            print('Error adding file %s to database'%file)
            continue
        else:
            # If added to database, move file
            shutil.move(path, os.path.join(config.added, file))
        try:
            anubis_result = _submit_anubis(fid, file)
        except SafetyCheckError, e:
            print("Safety Check Error on file %s while submitting to anubis"%file)
            print('')
            anubis_result = False
        except FatalError, e:
            print("Fatal error when submitting file %s to anubis"%file)
            db.remove_anubis(fid)
            print("Removed from anubis queue")
            print(e)
            print('')
            anubis_result = False
        except Exception, e:
            print("Exception while submitting file %s to anubis"%file)
            print(e)
            print('')
            anubis_result = False
        try:
            cwsandbox_result = _submit_cwsandbox(fid, file)
        except SafetyCheckError, e:
            print("Safety Check Error on file %s while submitting to cwsandbox"%file)
            print('')
            cwsandbox_result = False
        except FatalError, e:
            print("Fatal error when submitting file %s to cwsandbox"%file)
            print("Removed from cwsandbox queue")
            db.remove_cwsandbox(fid)
            print(e)
            print('')
            cwsandbox_result = False
        except Exception, e:
            print("Exception while submitting file %s to cwsandbox"%file)
            print(e)
            print('')
            cwsandbox_result = False
        if anubis_result:
            try:
                _retrieve_anubis(fid, file, anubis_result)
            except SafetyCheckError, e:
                print("Safety Check Error on file %s while retrieving from anubis"%file)
                print('')
            except FatalError, e:
                print("Fatal error when retrieving file %s from anubis"%file)
                print("Removed from anubis queue")
                db.remove_anubis(fid)
                print(e)
                print('')
            except TimeLeftError, e:
                print("File %s not fully analyzed by anubis yet"%file)
                print(e)
                print('')
            except Exception, e:
                print("Exception while retrieving file %s from anubis"%file)
                print(e)
                print('')
        if cwsandbox_result:
            try:
                _retrieve_cwsandbox(fid, file, cwsandbox_result)
            except SafetyCheckError, e:
                print("Safety Check Error on file %s while retrieving from cwsandbox"%file)
                print('')
            except FatalError, e:
                print("Fatal error when retrieving file %s from cwsandbox"%file)
                db.remove_cwsandbox(fid)
                print("Removed from cwsandbox queue")
                print(e)
                print('')
            except TimeLeftError, e:
                print("File %s not fully analyzed by cwsandbox yet"%file)
                print(e)
                print('')
            except Exception, e:
                print("Exception while retrieving file %s from cwsandbox"%file)
                print(e)
                print('')

def populate_database():
    """ Add new files to the database """
    # Get list of files that need submitting
    submit_list = os.listdir(config.new)
    for ignore in config.ignore_list:
        if ignore in submit_list:
            submit_list.remove(ignore)
    # Add files to database
    for file in submit_list:
        path = os.path.join(config.new, file)
        # Add file to database
        try:
            fid = db.add_file(file)
        except Exception, e:
            print('Error adding file %s to database'%file)
            print(e)
            print('')
            continue
        else:
            # If added to database, move file
            shutil.move(path, os.path.join(config.added, file))

def process_database():
    """ Process files that are already in the database """
    if db.check_anubis_submission_throttle():
        anubis_submit_list = db.get_anubis_submit_queue()
    else:
        print("Throttle exceeded for anubis submissions\n")
        anubis_submit_list = []
    if db.check_cwsandbox_submission_throttle():
        cwsandbox_submit_list = db.get_cwsandbox_submit_queue()
    else:
        print("Throttle exceeded for cwsandbox submissions\n")
        cwsandbox_submit_list = []
 
    for fid in anubis_submit_list:
        file = db.get_name(fid)
        try:
            _submit_anubis(fid)
        except SafetyCheckError, e:
            print("Safety Check Error on file %s while submitting to anubis"%file)
        except FatalError, e:
            print("Fatal error when submitting file %s to anubis"%file)
            db.remove_anubis(fid)
            print("Removed from aubis queue")
            print(e)
            print('')
        except Exception, e:
            print("Exception while submitting file %s to anubis"%file)
            print(e)
            print('')

    for fid in cwsandbox_submit_list:
        file = db.get_name(fid)
        try:
            _submit_cwsandbox(fid)
        except SafetyCheckError, e:
            print("Safety Check Error on file %s while submitting to cwsandbox"%file)
            print('')
        except FatalError, e:
            print("Fatal error when submitting file %s to cwsandbox"%file)
            db.remove_cwsandbox(fid)
            print("Removed from cwsandbox queue")
            print(e)
            print('')
        except Exception, e:
            print("Exception while submitting file %s to cwsandbox"%file)
            print(e)
            print('')

    if db.check_anubis_retrieval_throttle():
        anubis_retrieve_list = db.get_anubis_retrieve_queue()
    else:
        print("Throttle exceeded for anubis retrievals\n")
        anubis_retrieve_list = []
    if db.check_cwsandbox_retrieval_throttle():
        cwsandbox_retrieve_list = db.get_cwsandbox_retrieve_queue()
    else:
        print("Throttle exceeded for cwsandbox retrievals\n")
        cwsandbox_retrieve_list = []

    for fid in anubis_retrieve_list:
        file = db.get_name(fid)
        try:
           _retrieve_anubis(fid) 
        except SafetyCheckError, e:
            print("Safety Check Error on file %s while retrieving from anubis"%file)
            print('')
        except FatalError, e:
            print("Fatal error when retrieving file %s from anubis"%file)
            db.remove_anubis(fid)
            print("Removed from anubis queue")
            print(e)
            print('')
        except TimeLeftError, e:
            print("File %s not fully analyzed by anubis yet"%file)
            print(e)
            print('')
        except Exception, e:
            print("Exception while retrieving file %s from anubis"%file)
            print(e)
            print('')

    for fid in cwsandbox_retrieve_list:
        file = db.get_name(fid)
        try:
           _retrieve_cwsandbox(fid) 
        except SafetyCheckError, e:
            print("Safety Check Error on file %s while retrieving from cwsandbox"%file)
            print('')
        except FatalError, e:
            print("Fatal error when retrieving file %s from cwsandbox"%file)
            db.remove_cwsandbox(fid)
            print("Removed from cwsandbox queue")
            print(e)
            print('')
        except TimeLeftError, e:
            print("File %s not fully analyzed by cwsandbox yet"%file)
            print(e)
            print('')
        except Exception, e:
            print("Exception while retrieving file %s from cwsandbox"%file)
            print(e)
            print('')

def _retrieve_anubis(fid, file=None, info=None):
    """ Retrieve the report using the indentifying information in info.
    If info not given, used file id fid to retrieve from db.
    Saves in report directory with name file.
    """
    if not db.check_anubis_retrieval_throttle():
        raise ThrottleError
    if not file:
        file = db.get_name(fid)
    if not info:
        info = db.get_anubis_info(fid)
    path = os.path.join(config.anubisdir, file)
    try:
        anubis.retrieve(path, *info)
    except TimeLeftError, e:
        db.set_anubis_wait(fid, e.time)
        raise e
    db.set_anubis_retrieved(fid)
    db.remove_if_done(fid)
    db.increment_anubis_retrieval()

def _retrieve_cwsandbox(fid, file=None, info=None):
    """ Retrieve the report using the indentifying information in info.
    If info not given, used file id fid to retrieve from db.
    Saves in report directory with name file.
    """
    if not db.check_cwsandbox_retrieval_throttle():
        raise ThrottleError
    if not file:
        file = db.get_name(fid)
    if not info:
        info = db.get_cwsandbox_info(fid)
    path = os.path.join(config.cwsandboxdir, file)
    try:
        cwsandbox.retrieve(path, *info)
    except TimeLeftError, e:
        db.set_cwsandbox_wait(fid, e.time)
        raise e
    db.set_cwsandbox_retrieved(fid)
    db.remove_if_done(fid)
    db.increment_cwsandbox_retrieval()

def _submit_anubis(fid, file=None):
    """ Submit to the anubis analyzer.
    Any exceptions generated by submission are passed along
    """
    if not db.check_anubis_submission_throttle():
        raise ThrottleError
    if not file:
        file = db.get_name(fid)
    path = os.path.join(config.added, file)
    result = anubis.submit(path)
    db.set_anubis_info(fid, *result)
    db.increment_anubis_submission()
    return result

def _submit_cwsandbox(fid, file=None):
    """ Submit to the cwsandbox analyzer.
    Any exceptions generated by submission are passed along
    """
    if not db.check_cwsandbox_submission_throttle():
        raise ThrottleError
    if not file:
        file = db.get_name(fid)
    path = os.path.join(config.added, file)
    result = cwsandbox.submit(path)
    db.set_cwsandbox_info(fid, *result)
    db.increment_cwsandbox_submission()
    return result

if __name__ == '__main__':
    populate_database()
    process_database()
