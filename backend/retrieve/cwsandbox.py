#!/usr/bin/env python

import re
import sys
import urllib2
from optparse import OptionParser
from backend.errors import FatalError
from backend.errors import TimeLeftError
from backend.errors import SafetyCheckError

RESULT_URL = "http://mwanalysis.org/?site=1&page=analysis&format=%(format)s&analysisid=%(id)s&password=%(password)s"
DETAIL_URL = "http://mwanalysis.org/?page=details&mode=view&id=%(id)s&password=%(password)s"
XML_REGEX = re.compile('<\?xml version="1.0"(?: encoding=".*")?\?>\s*<!-- This analysis was created by CWSandbox \(c\) CWSE GmbH / Sunbelt Software-->')
ID_REGEX = re.compile('Summary of sample execution \(AnalysisID: (?P<id>\d+)\)')
# The number of seconds to report as remaining
TIME_LEFT = 5 * 60 * 60

# Format constants
# The values of these constants should
# be the string used for the format parameter
# in the result url
XML = 'xml'
TEXT = 'txt'
HTML = 'html'

def safety_check_retrieval(retrieved, detail_page, format=XML, id=None, pwd=None):
    # TODO Add more robust check.  Mainly, check for not analyzed yet
    """ Perform safety checks on the retrieved item.
    If checks fail will raise a SafetyCheckError.
    Does not return a value.
    Currently only defined for the xml format.
    """
    run_regex = re.compile('analysis running')
    fatal_regex = re.compile('Error #(\d+)')
    if format == XML:
        if not re.match(XML_REGEX, retrieved):
            if re.search(run_regex, detail_page):
                raise TimeLeftError(TIME_LEFT)
            elif re.search(fatal_regex, detail_page):
                raise FatalError(re.search(fatal_regex, detail_page).group(1))
            else:
                raise SafetyCheckError('Expected XML format.')

def retrieve(id, pwd, path=None, format = XML, stdout=False):
    """ Retrieve the completed report.
    Parameters:
        path  --  the path to store the retrieved report under
        id    --  the analysis id of the report
        format -- which format to retrieve the report.  Acceptable
                  values are defined by constantes in this module
    """
    if path:
        try:
            fh = open(path, 'w')
        except IOError:
            print('Error: Can\'t open %s for writing.'%path)
            return False

    detail_url = DETAIL_URL% {'id':id, 'password':pwd}
    try:
        response = urllib2.urlopen(detail_url)
        details = response.read()
        result = re.search(ID_REGEX, details)
        id = result.group('id')
        url = RESULT_URL % {'id':id, 'password':pwd, 'format':format}
        response = urllib2.urlopen(url)
        report = response.read()
        # XXX
        #print(report)
        #print(details)
        safety_check_retrieval(report, details, format, id, pwd)
        if path:
            fh.write(report)
        if stdout:
            sys.stdout.write(report)
        return True
    except urllib2.URLError:
        print('Error accessing %s' % url)
    except IOError:
        print('Error while writing %s' % path)
    return False

def main(argv = None):
    if not argv:
        argv = sys.argv[1:]

    parser = OptionParser("usage: %prog --id=task-id --path=output-path")
    parser.add_option('', '--id', action='store', dest='id', default=None,
                      help='The task id of the report to retrieve')
    parser.add_option('', '--pwd', action='store', dest='pwd', default=None,
                      help='The password for accessing the report')
    parser.add_option('', '--path', action='store', dest='path', default=None,
                      help='The path to save the report under')
    parser.add_option('', '--stdout', action='store_true', dest='stdout', default=False,
                      help='Output to stdout.  If path is given, will write to the file as well')
    options, args = parser.parse_args(argv)

    if not (options.id and options.pwd):
        print('Error: Id and password must be given.')
        parser.print_help()
    elif not (options.path or options.stdout):
        print('Error: Either path or stdout must be given.')
        parser.print_help()
    else:
        if retrieve(options.id, options.pwd, options.path, XML, options.stdout):
            if not options.stdout:
                print("Successfully saved report %s to %s" % (options.id, options.path))
        else:
            print("Failed retrieving report %s" % options.id)


if __name__ == '__main__':
    main()
