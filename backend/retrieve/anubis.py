import re
import sys
import urllib2
from optparse import OptionParser
from backend.errors import TimeLeftError
from backend.errors import SafetyCheckError

RESULT_URL = "http://anubis.iseclab.org/?action=result&task_id=%(task_id)s&format=%(format)s&save=1"
# Regex for finding time left.  Defines groups days, hours, minutes, and seconds
TIME_REGEX = re.compile('(?:(?P<days>\d+) day, )?(?P<hours>\d+) hours, (?P<minutes>\d+) minutes and (?P<seconds>\d+) seconds')
XML_REGEX = re.compile('<\?xml version="1.0"(?: encoding=".*")?\?>\s*<analysis>')

# Format constants
# The values of these constants should
# be the string used for the format parameter
# in the result url
XML = 'xml'
TEXT = 'txt'
HTML = 'html'
PDF = 'pdf'

def safety_check_retrieval(retrieved, format=XML):
    """ Perform safety checks on the retrieved item.
    If checks fail will raise a SafetyCheckError.
    Does not return a value.
    Currently only defined for the xml format.
    """
    if format == XML:
        if not re.match(XML_REGEX, retrieved):
            time_check = re.search(TIME_REGEX, retrieved)
            if time_check:
                # Determine time in seconds left 
                d = time_check.group('days')
                h = time_check.group('hours')
                m = time_check.group('minutes')
                s = time_check.group('seconds')
                if not d:
                    d = 0
                if not h:
                    h = 0
                if not m:
                    m = 0
                if not s:
                    s = 0
                time_left = 60 * (60 * (24 * d + h) + m) + s
                raise TimeLeftError(time_left)
            else:
                raise SafetyCheckError('Expected XML format.')

def retrieve(id, path=None, format = XML, stdout=False):
    """ Retrieve the completed report.
    Parameters:
        path  --  the path to store the retrieved report under
        id    --  the analysis id of the report
        format -- which format to retrieve the report.  Acceptable
                  values are defined by constantes in this module
    """
    if path:
        try:
            fh = open(path, 'w')
        except IOError:
            print('Error: Can\'t open %s for writing.'%path)
            return False

    url = RESULT_URL % {'task_id':id, 'format':format}
    try:
        response = urllib2.urlopen(url)
        report = response.read()
        # TODO Wrap this in a try block and add error handling, esp for TimeLeftError
        safety_check_retrieval(report)
        if path:
            fh.write(report)
        if stdout:
            sys.stdout.write(report)
        return True
    except urllib2.URLError:
        print('Error accessing %s' % url)
    except IOError:
        print('Error while writing %s' % path)
    return False

def main(argv = None):
    if not argv:
        argv = sys.argv[1:]

    parser = OptionParser("usage: %prog --id=task-id --path=output-path")
    parser.add_option('', '--id', action='store', dest='task_id', default=None,
                      help='The task id of the report to retrieve')
    parser.add_option('', '--path', action='store', dest='path', default=None,
                      help='The path to save the report under')
    parser.add_option('', '--stdout', action='store_true', dest='stdout', default=False,
                      help='Output to stdout.  If path is given, will write to the file as well')
    options, args = parser.parse_args(argv)

    if not options.task_id:
        print('Error: Task id must be given.')
        parser.print_help()
    elif not (options.path or options.stdout):
        print('Error: Either path or stdout must be given.')
        parser.print_help()
    else:
        if retrieve(options.task_id, options.path, XML, options.stdout):
            if not options.stdout:
                print("Successfully saved report %s to %s" % (options.task_id, options.path))
        else:
            print("Failed retrieving report %s" % options.task_id)

if __name__ == "__main__":
    main()
