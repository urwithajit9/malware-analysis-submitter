#!/usr/bin/env python
################################################################################
# Script for submitting samples to the Cwsandbox analysis service.
#
# Usage: submit.py [options] ANALYSIS_SUBJECT_1 ANALYSIS_SUBJECT_2 ...
#     OR submit.py [options] -r DIRECTORY
#
# Options:
#   -h, --help            show this help message and exit
#   -e EMAIL, --email=EMAIL
#                         specifies the recipient of the analysis result. As
#                         soon as the analysis-server has finished processing
#                         the file the generated report will be sent to the
#                         given emailaddress. You can choose to omit this
#                         argument if you do not want to receive an email-
#                         message containg the analysis-result
#   -r, --recursive       recursively submit all samples found
#
# ANALYSIS_SUBJECT_1/ANALYSIS_SUBJECT_2/...: 
#             These arguments will be interpreted as the name of a file that shall 
#             be uploaded to.  It specifies the relative or absolute path to the 
#             file that will be sent to the analysis-server.
#             If - is given for the filename the file is read from stdin.
#             Note: On Windows you have start the python interpreter with -u
#                   in order to have a stdin-stream in binary mode.
#
# The script returns 0 for successful submissions and values > 0 in case of
# an error.
#
# Example: python ./submit.py --email joe@example.com testfile.exe
#
################################################################################

BASE_URL = "http://mwanalysis.org/"
SUBMIT_URL = BASE_URL + "?site=1&page=submit"
RESULT_URL = BASE_URL + "?site=1&page=details&mode=view&"

import re
import os
import sys
import time
import urllib
import urllib2
import optparse
from poster import encode
from poster.streaminghttp import register_openers
from backend.errors import InvalidContentError, InvalidURLError
    
RESULT_REGEX = re.compile("is being analyzed|You have already submitted this sample|The sample you have submitted has already been analysed.")
#["is being analyzed.", "You have already submitted this sample." , "The sample you have submitted has already been analysed."]

# The samples successfully submitted
successful = []
# The samples with failed submissions
failed = []
# stores the parsed command-line arguments
options = None


class SubmissionError(Exception):
    pass

def _create_post_data(analysis_subject, email_addr, comment):
    try:
        post_data = {}

        if (analysis_subject == "-"):
            fh = sys.stdin
            fn = "stdin"
        else:
            fh = open(analysis_subject, "rb")
            fn = analysis_subject
    except IOError:
        print "File does not exist!"

    #post_data["upfile"] = {"content" : fh, "filename" : fn} 
    post_data['upfile'] = fh
    post_data["email"] = email_addr
    post_data["comment"] = comment
    post_data["submit"] = "Submit for analysis"
    post_data['password'] = ''

    return post_data

def submit(analysis_subject, email_addr, comment=''):
    """Submits the 'analysis_subject' to ANUBIS.
    Returns the task_id of the created task.
    """

    analysisid = ''
    password = ''
    post_data = _create_post_data(analysis_subject, email_addr, comment)

    register_openers()
    datagen, headers = encode.multipart_encode(post_data)
    request = urllib2.Request(SUBMIT_URL, datagen, headers)
    response = urllib2.urlopen(request)

    if response.code != 200:
        print "Error submitting the analysis subject '%s'." % \
              analysis_subject
        raise SubmissionError()
    else:
        page = response.read()
        if re.search(RESULT_REGEX, page):
            result = re.search("id=(\d+)\S+password=(\w+)", page)
            id = result.group(1)
            pwd = result.group(2)
            return id, pwd 
        else:
            raise SubmissionError()

def main(args=None):
    global failed
    global successful
    global options

    if not args:
        args = sys.argv[1:]

    # Result will list of dictionaries containing id and password
    return_result = []

    usage_msg="%prog [options] ANALYSIS_SUBJECT_1 ANALYSIS_SUBJECT_2 ..."
    usage_msg+= "\n    OR %prog [options] -r DIRECTORY"
    parser = optparse.OptionParser(usage=usage_msg)
    analysis_type_list = ["URL", "FILE"]
    parser.add_option("-e", "--email", dest="email", type="string", default='',
                      help="specifies the recipient of the analysis result. As "+
                      "soon as the analysis-server has finished processing the "+
                      "file the generated report will be sent to the given "+
                      "emailaddress. You can "+
                      "choose to omit this argument if you do not want to receive "+
                      "an email-message containg the analysis-result")
    parser.add_option("-r", "--recursive", dest="recursive", action="store_true",
                      default=False, help = "recursively submit all samples found") 
    parser.add_option('-m', '--message', dest="comment", type='string', default='',
                      help = "An optional comment describing the sample submitted")

    # What is the purpose of this line?
    empty_options = parser.parse_args(args)[0]
    
    (options, args) = parser.parse_args(args)

    if (len(args) == 0):
        parser.print_help()
        sys.exit(2)

    for ana_subj in args:
        if options.recursive and os.path.isdir(ana_subj):
            submit_dir(ana_subj,
                       options.email, options.user, 
                       options.password, options.force_analysis,
                       options.keep_files, options.anubis_date,
                       options.timeout, options.ssl,options.dump_process)
        else:
            try:
                idnum, password = submit(ana_subj, options.email, options.comment)
                if idnum and password:
                    print "CWSandbox: File submission success, id=" + idnum + " password=" + password
                    return_result.append({'id':idnum, 'password':password})
                    successful.append(ana_subj)
                else:
                    failed.append(ana_subj)
            except SubmissionError:
                failed.append(ana_subj)
                
    if successful:
        print "Successfully submitted %d analysis subjects." % len(successful)
    if failed:
        print "Failed to submit %d analysis subjects." % len(failed)

    return return_result
           
if __name__ == '__main__':
    main()
